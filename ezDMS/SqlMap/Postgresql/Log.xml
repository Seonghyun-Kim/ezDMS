<?xml version="1.0" encoding="utf-8" ?>
<sqlMap
 namespace="Log"
	xmlns="http://ibatis.apache.org/mapping"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">


  <alias>
    <typeAlias alias="loginInfo" type="SmartDSP.Models.Log.LoginHistoryModel" />
    <typeAlias alias="actionLog" type="SmartDSP.Models.Log.ActionHistoryModel" />
    <typeAlias alias="LoginCntStats" type="SmartDSP.Models.Stats.LoginDateStats" />
    <typeAlias alias="LoginTopUser" type="SmartDSP.Models.Stats.LoginTopUserStats" />
  </alias>

  <statements> 
    <insert id="InsLoginHis" resultClass="int" parameterClass="loginInfo">
      <selectKey type="pre" resultClass="int" Property="login_idx"> 
        SELECT COALESCE(MAX(login_idx) + 1, 1) AS login_idx FROM log_login_history
      </selectKey>

      INSERT INTO log_login_history (login_idx, try_id, try_pw, try_ip, try_dt, login_st, login_us, session_id)
      VALUES (#login_idx#, #try_id#, #try_pw#, #try_ip#, now(), #login_st#, #login_us#, #session_id# )

    </insert>

    <insert id="InsActionHis" resultClass="int" parameterClass="actionLog">
      <selectKey type="pre" resultClass="int" Property="action_idx">
        SELECT COALESCE(MAX(action_idx) + 1, 1) AS action_idx FROM log_action_history
      </selectKey>

      INSERT INTO log_action_history
      (action_idx, action_module, action_module_idx, action_type, action_target_idx, action_ip, action_dt, action_us, action_url, session_id, description)
      VALUES(#action_idx#, #action_module#, #action_module_idx#, #action_type#, #action_target_idx#, #action_ip#, now(), #action_us#, #action_url#, #session_id#, #description#)
    </insert>

    <select id="selActionHis" resultClass="actionLog" parameterClass="actionLog">
      select
      a.action_idx
      , a.action_module
      , b.kor_nm as action_module_kor_nm
      , b.eng_nm as action_module_eng_nm
      , b.chn_nm as action_module_chn_nm
      , b.etc1_nm as action_module_etc1_nm
      , b.etc2_nm as action_module_etc2_nm
      , a.action_module_idx
      , a.action_type
      , c.kor_nm as action_type_kor_nm
      , c.eng_nm as action_type_eng_nm
      , c.chn_nm as action_type_chn_nm
      , c.etc1_nm as action_type_etc1_nm
      , c.etc2_nm as action_type_etc2_nm
      , a.action_target_idx
      , a.action_ip
      , a.action_dt
      , a.action_us
      , d.us_nm as action_us_nm
      , d.us_role
      , g.kor_nm as us_role_kor_nm
      , g.eng_nm as us_role_eng_nm
      , g.chn_nm as us_role_chn_nm
      , g.etc1_nm as us_role_etc1_nm
      , g.etc2_nm as us_role_etc2_nm
      , d.us_group
      , case when d.us_role = 10 then f.vend_nm else e.dept_nm end as us_group_nm
      , a.description
      from log_action_history a
      left join sys_library b on b.parent_idx = (select idx from sys_library where comm_code='MODULE') and a.action_module  :: text = b.comm_code
      left join sys_library c on c.parent_idx = (select idx from sys_library where comm_code='ACTION') and a.action_type  :: text = c.comm_code
      left join sys_users d on a.action_us = d.us_idx
      inner join sys_department e on d.us_group = e.dept_idx
      inner join sys_vender f on d.us_group = f.vend_idx
      left join sys_library g on g.parent_idx = (select idx from sys_library where comm_code='ROLE') and d.us_role :: text = g.comm_code
      <dynamic prepend="where">
        <isNotNull prepend="and" property="search_action_module">
          a.action_module = #search_action_module#
        </isNotNull>

        <isNotNull prepend="and" property="search_action_type">
          a.action_type = #search_action_type#
        </isNotNull>

        <isNotNull prepend="and" property="action_target_idx">
          a.action_target_idx = #action_target_idx#
        </isNotNull>

        <isNotNull property="us_group_nm">
          <isEqual prepend="and"  property="us_role" compareValue="10">
            UPPER(f.vend_nm)  LIKE '%'|| UPPER(#us_group_nm#) and us_role = 10
          </isEqual>
          <isNotEqual prepend="and"  property="us_role" compareValue="10">
            UPPER(e.dept_nm) LIKE '%'|| UPPER(#us_group_nm#) and us_role != 10
          </isNotEqual>
        </isNotNull>

        <isNotNull prepend="and" property="action_us">
          action_us = #action_us#
        </isNotNull>

        <isNotNull prepend="and" property="action_us_nm">
          UPPER(d.us_nm) LIKE '%'|| UPPER(#action_us_nm#) ||'%'
        </isNotNull>
        
        <isNotNull prepend="and" property="actionSDate">
          A.action_dt BETWEEN  to_timestamp(#actionSDate# || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND to_timestamp(#actionEDate# || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
        </isNotNull>

        <isNotNull prepend="and" property="isFileHistory">
          action_type in( 90, 100)
        </isNotNull>
      </dynamic>
      order by action_idx desc
    </select>

    <select id="selLoginHis" resultClass="loginInfo" parameterClass="loginInfo">
      select
      A.login_idx
      , A.try_id
      , A.try_ip
      , A.try_dt
      , A.login_st
      , B.kor_nm as login_st_kor_nm
      , B.eng_nm as login_st_eng_nm
      , B.chn_nm as login_st_chn_nm
      , B.etc1_nm as login_st_etc1_nm
      , B.etc2_nm as login_st_etc2_nm
      , A.login_us
      , C.us_nm as login_us_nm
      , C.us_role
      , F.kor_nm as us_role_kor_nm
      , F.eng_nm as us_role_eng_nm
      , F.chn_nm as us_role_chn_nm
      , F.etc1_nm as us_role_etc1_nm
      , F.etc2_nm as us_role_etc2_nm
      , c.us_group
      , case when c.us_role = 10 then e.vend_nm else D.dept_nm end as us_group_nm
      from log_login_history A
      left join sys_library B on B.parent_idx = (select idx from sys_library where comm_code='LOGIN') and a.login_st  :: text = B.comm_code
      left join sys_users C on a.login_us = C.us_idx
      left join sys_department D on c.us_group = D.dept_idx
      left join sys_vender E on c.us_group = E.vend_idx
      left join sys_library F on F.parent_idx = (select idx from sys_library where comm_code='ROLE') and c.us_role :: text = F.comm_code
      <dynamic prepend="where">
        <isNotNull prepend="and" property="try_id">
          UPPER(A.try_id) LIKE '%'|| UPPER(#try_id#) ||'%'
        </isNotNull>
        <isNotNull prepend="and" property="login_us_nm">
          UPPER(C.us_nm) LIKE '%'|| UPPER(#login_us_nm#) ||'%'
        </isNotNull>
        <isNotNull prepend="and" property="try_ip">
          UPPER(A.try_ip) LIKE '%'|| UPPER(#try_ip#) ||'%'
        </isNotNull>
        <isNotNull property="us_group_nm">
          <isEqual prepend="and"  property="us_role" compareValue="10">
            UPPER(E.vend_nm) LIKE '%'|| UPPER(#us_group_nm#) ||'%' 
          </isEqual>
          <isNotEqual prepend="and"  property="us_role" compareValue="10">
            UPPER(D.dept_nm) LIKE '%'|| UPPER(#us_group_nm#) ||'%'
          </isNotEqual>
        </isNotNull>
        <isNotNull property="us_role">
          <isEqual prepend="and"  property="us_role" compareValue="10">
            us_role = 10
          </isEqual>
          <isNotEqual prepend="and"  property="us_role" compareValue="10">
            us_role != 10
          </isNotEqual>
        </isNotNull>
        
        <isNotNull prepend="and" property="login_st">
          a.login_st = #login_st#
        </isNotNull>
        <isNotNull prepend="and" property="tryLoginSDate">
          A.try_dt BETWEEN  to_timestamp(#tryLoginSDate# || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND to_timestamp(#tryLoginEDate# || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
        </isNotNull>
      </dynamic>
      order by A.login_idx desc
    </select>

    <select id="selLoginDateCnt" resultClass="LoginCntStats"  parameterClass="LoginCntStats">
      select mmdd as login_date, count(login_idx) as login_cnt from (
      WITH date_series AS (select DATE(GENERATE_SERIES(to_date(#searchSdate#, 'YYYY-MM-DD'), to_date(#searchEdate#, 'YYYY-MM-DD'),'1 day')) AS date)
      SELECT
      to_char(date, 'MM-DD') as mmdd
      FROM date_series) a
      left join (
      select to_char(try_dt, 'MM-DD') as login_date, login_idx from log_login_history
      where try_dt BETWEEN  to_timestamp(#searchSdate# || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND to_timestamp(#searchEdate# || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
      ) l on a.mmdd = l.login_date
      group by mmdd
      order by mmdd
    </select>

    <select id="selLoginTopUser" resultClass="LoginTopUser"  parameterClass="LoginTopUser"  >
      select a.login_us
      , case when b.us_role = 10 then e.vend_nm else d.dept_nm end || '-' ||b.us_nm as login_us_nm
      , a.login_cnt  from (
      select
      login_us, count(login_idx) as login_cnt
      from log_login_history
      where try_dt BETWEEN  to_timestamp(#searchSdate# || ' 00:00:00', 'YYYY-MM-DD HH24:MI:SS') AND to_timestamp(#searchEdate# || ' 23:59:59', 'YYYY-MM-DD HH24:MI:SS')
      and login_st = 'S'
      group by login_us
      ) a
      inner join sys_users b on a.login_us = b.us_idx
      left join sys_department D on b.us_group = D.dept_idx
      left join sys_vender E on b.us_group = E.vend_idx
      order by login_cnt desc
      limit 5
    </select>


  </statements>
</sqlMap>